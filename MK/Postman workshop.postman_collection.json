{
	"info": {
		"_postman_id": "4b1e3c3f-e368-4d7e-9846-a6cb039353ad",
		"name": "Postman workshop",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "0 Ping",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{host}}:{{port}}/v1/ping",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"v1",
						"ping"
					]
				}
			},
			"response": []
		},
		{
			"name": "1 About",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "bf3cbdb7-242f-4b69-b3ba-0af3bda63f23",
						"exec": [
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"// pm.test(\"Status code is 200\", function () {\r",
							"//     pm.response.to.have.status(200);\r",
							"// });\r",
							"\r",
							"// pm.test(\"Body matches string postman\", function () {\r",
							"//     pm.expect(pm.response.text()).to.include(\"postman\");\r",
							"// });\r",
							"\r",
							"// pm.test(\"Body matches string hello world\", function () {\r",
							"//     pm.expect(pm.response.text()).to.include(\"hello world\");\r",
							"// });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{host}}:{{port}}/v1/about",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"v1",
						"about"
					]
				},
				"description": "Первый тест на проверку кода ответа и содержание в ответе нужной подстроки"
			},
			"response": []
		},
		{
			"name": "2.1 Get auth token",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0c32df17-13e9-463d-bf66-92f16dbd1647",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Get user name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.login).to.eql(\"admin\");\r",
							"});\r",
							"\r",
							"pm.test(\"Set auth token\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var atoken = \"Bearer \" + jsonData.token\r",
							"    console.log(atoken);\r",
							"    pm.environment.set(\"Authorization\", atoken);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{host}}:{{port}}/v1/auth?login={{login}}&password={{password}}",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"v1",
						"auth"
					],
					"query": [
						{
							"key": "login",
							"value": "{{login}}",
							"description": "(Required) User login"
						},
						{
							"key": "password",
							"value": "{{password}}",
							"description": "(Required) User password"
						}
					]
				},
				"description": "Получение данных для авторизации из ответа"
			},
			"response": [
				{
					"name": "Auth error",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/auth?login=<string>&password=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth"
							],
							"query": [
								{
									"key": "login",
									"value": "<string>"
								},
								{
									"key": "password",
									"value": "<string>"
								}
							]
						}
					},
					"status": "Forbidden",
					"code": 403,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "\"Incorrect login or password\""
				},
				{
					"name": "successful operation",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/auth?login=<string>&password=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth"
							],
							"query": [
								{
									"key": "login",
									"value": "<string>"
								},
								{
									"key": "password",
									"value": "<string>"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n \"login\": \"admin\",\n \"token\": \"SomeToken\",\n \"expiredTime\": \"2017-07-21T17:32:28Z\"\n}"
				}
			]
		},
		{
			"name": "2.2 Get rubrics",
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"description": "(Required) Bearer auth token. Value example: 'Bearer 84f8a84bc0edeeb5742e9c2b706e94ea'",
						"key": "Authorization",
						"value": "{{Authorization}}"
					}
				],
				"url": {
					"raw": "http://{{host}}:{{port}}/v1/rubric",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"v1",
						"rubric"
					]
				},
				"description": "Запрос работает только с правильным заголовком Authorization, который надо получить в предыдущем запросе"
			},
			"response": [
				{
					"name": "successful operation",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "<string>",
								"description": "(Required) Bearer auth token. Value example: 'Bearer 84f8a84bc0edeeb5742e9c2b706e94ea'"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/author?sort=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"author"
							],
							"query": [
								{
									"key": "sort",
									"value": "<string>"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "[\n {\n  \"id\": 5,\n  \"firstName\": \"Ivan\",\n  \"lastName\": \"Ivanov\",\n  \"position\": \"Corrector\"\n },\n {\n  \"id\": 5,\n  \"firstName\": \"Ivan\",\n  \"lastName\": \"Ivanov\",\n  \"position\": \"Corrector\"\n }\n]"
				}
			]
		},
		{
			"name": "3.1 Add or update author",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "b26ae06c-45a3-4472-928c-864279dff1ea",
						"exec": [
							"// Функция возвращает случайную букву из массива\r",
							"function randChar() {\r",
							"    var symbols = \"абвгдеёжзийклмнопрстуфхцчшщъыьэюя\";\r",
							"    return symbols.charAt(Math.floor(Math.random() * symbols.length))\r",
							"}\r",
							"\r",
							"// Функция возвращает строку из случайных символов с первой строчной буквой\r",
							"function randName(x) {\r",
							"    var text = randChar().toUpperCase();\r",
							"    for (var i = 1; i < x; i++)\r",
							"        text += randChar();\r",
							"    return text;\r",
							"}\r",
							"\r",
							"pm.variables.set(\"name\", randName(10));\r",
							"pm.variables.set(\"fam\", randName(12));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PUT",
				"header": [
					{
						"description": "(Required) Bearer auth token. Value example: 'Bearer 84f8a84bc0edeeb5742e9c2b706e94ea'",
						"key": "Authorization",
						"value": "{{Authorization}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": {{$randomInt}},\n    \"firstName\": \"{{name}}\",\n    \"lastName\": \"{{fam}}\",\n    \"position\": \"some position\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{host}}:{{port}}/v1/author",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"v1",
						"author"
					]
				},
				"description": "Генерация данных для запроса. Рассматривается использование pre-request-script и динамических переменных"
			},
			"response": [
				{
					"name": "successful operation",
					"originalRequest": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "<string>",
								"description": "(Required) Bearer auth token. Value example: 'Bearer 84f8a84bc0edeeb5742e9c2b706e94ea'"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": 5,\n    \"firstName\": \"Ivan\",\n    \"lastName\": \"Ivanov\",\n    \"position\": \"Corrector\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/author",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"author"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n \"id\": 5,\n \"firstName\": \"Ivan\",\n \"lastName\": \"Ivanov\",\n \"position\": \"Corrector\"\n}"
				}
			]
		},
		{
			"name": "4.1 Add or update author",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "de39b790-1519-4703-8ba6-d63f866198bf",
						"exec": [
							"var host = pm.variables.get(\"host\")\r",
							"var port = pm.variables.get(\"port\")\r",
							"\r",
							"pm.sendRequest(\"http://\" + host + \":\" + port + \"/v1/author\", function (err, response) {\r",
							"    var resp = response.json() \r",
							"     console.log(resp);\r",
							"     var ids = resp[resp.length-1].id;\r",
							"    console.log(ids);\r",
							"    console.log(resp.length)\r",
							"pm.variables.set(\"id\", ids+1);\r",
							" });\r",
							"\r",
							"// Функция возвращает случайную букву из массива\r",
							"// function randChar() {\r",
							"//     var symbols = \"абвгдеёжзийклмнопрстуфхцчшщъыьэюя\";\r",
							"//     return symbols.charAt(Math.floor(Math.random() * symbols.length))\r",
							"// }\r",
							"\r",
							"// // Функция возвращает строку из случайных символов с первой строчной буквой\r",
							"// function randName(x) {\r",
							"//     var text = randChar().toUpperCase();\r",
							"//     for (var i = 1; i < x; i++)\r",
							"//         text += randChar();\r",
							"//     return text;\r",
							"// }\r",
							"\r",
							"// pm.variables.set(\"name\", randName(10));\r",
							"// pm.variables.set(\"fam\", randName(12));\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "534db3d1-b408-4452-b3d0-049ff42176b8",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PUT",
				"header": [
					{
						"description": "(Required) Bearer auth token. Value example: 'Bearer 84f8a84bc0edeeb5742e9c2b706e94ea'",
						"key": "Authorization",
						"value": "{{Authorization}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": {{id}},\n    \"firstName\": \"{{name}}\",\n    \"lastName\": \"{{fam}}\",\n    \"position\": \"some position\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{host}}:{{port}}/v1/author",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"v1",
						"author"
					]
				},
				"description": "Генерация данных для запроса. Рассматривается использование pre-request-script и динамических переменных"
			},
			"response": [
				{
					"name": "successful operation",
					"originalRequest": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "<string>",
								"description": "(Required) Bearer auth token. Value example: 'Bearer 84f8a84bc0edeeb5742e9c2b706e94ea'"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": 5,\n    \"firstName\": \"Ivan\",\n    \"lastName\": \"Ivanov\",\n    \"position\": \"Corrector\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/author",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"author"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n \"id\": 5,\n \"firstName\": \"Ivan\",\n \"lastName\": \"Ivanov\",\n \"position\": \"Corrector\"\n}"
				}
			]
		},
		{
			"name": "3.2 Get autors",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "1c3c8f08-8798-42e0-bff7-8c336282894d",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{Authorization}}",
						"description": "(Required) Bearer auth token. Value example: 'Bearer 84f8a84bc0edeeb5742e9c2b706e94ea'",
						"disabled": true
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{host}}:{{port}}/v1/author",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"v1",
						"author"
					]
				},
				"description": "Генерация данных для запроса. Рассматривается использование pre-request-script и динамических переменных"
			},
			"response": [
				{
					"name": "successful operation",
					"originalRequest": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "<string>",
								"description": "(Required) Bearer auth token. Value example: 'Bearer 84f8a84bc0edeeb5742e9c2b706e94ea'"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": 5,\n    \"firstName\": \"Ivan\",\n    \"lastName\": \"Ivanov\",\n    \"position\": \"Corrector\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/author",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"author"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n \"id\": 5,\n \"firstName\": \"Ivan\",\n \"lastName\": \"Ivanov\",\n \"position\": \"Corrector\"\n}"
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "8c88f41d-f7b4-47ca-885b-1f1ee8624e3f",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "f87e4a54-969b-4884-9001-afe963d0b3e3",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "b2550834-e9b0-4428-8243-e1b0f21b1466",
			"key": "host",
			"value": "127.0.0.1",
			"type": "string"
		},
		{
			"id": "cd75d7dd-9979-47bf-acdd-f7c4031842ed",
			"key": "port",
			"value": "1234",
			"type": "string"
		},
		{
			"id": "e0422458-9c05-407b-8a8d-f04b4af1654c",
			"key": "host1",
			"value": "192.168.88.241",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}