{
	"info": {
		"_postman_id": "5dbbfa08-05fe-4476-8e94-f9c5dd6bd7f2",
		"name": "Postman workshop",
		"description": "Коллекция для проведения воркшопа\r\nПроверка приложения - ping: http://localhost:1234/v1/ping\r\nДокументация к сервису: http://localhost:1234/doc\r\nSwagger: http://localhost:1234/swagger\r\nСтраничка с сущностями http://localhost:1234/main",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "0 Ping",
			"item": [
				{
					"name": "Ping",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{hostPort}}/v1/ping",
							"protocol": "http",
							"host": [
								"{{hostPort}}"
							],
							"path": [
								"v1",
								"ping"
							]
						},
						"description": "Проверка работоспособности сервиса"
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "1 Tests",
			"item": [
				{
					"name": "About",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "73ec19dc-4c83-49f5-bbd1-74e086ed9a51",
								"exec": [
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"// pm.test(\"Status code is 200\", function () {\r",
									"//     pm.response.to.have.status(200);\r",
									"// });\r",
									"\r",
									"// pm.test(\"Body matches string postman\", function () {\r",
									"//     pm.expect(pm.response.text()).to.include(\"postman\");\r",
									"// });\r",
									"\r",
									"// pm.test(\"Body matches string hello world\", function () {\r",
									"//     pm.expect(pm.response.text()).to.include(\"hello world\");\r",
									"// });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{hostPort}}/v1/about",
							"protocol": "http",
							"host": [
								"{{hostPort}}"
							],
							"path": [
								"v1",
								"about"
							]
						},
						"description": "Первый тест на проверку кода ответа и содержание в ответе нужной подстроки"
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "2 Get variable from response",
			"item": [
				{
					"name": "1 Get auth token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "00e30857-dea3-46b6-b5b7-64e77c3bd747",
								"exec": [
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"// pm.test(\"Status code is 200\", function () {\r",
									"//     pm.response.to.have.status(200);\r",
									"// });\r",
									"\r",
									"// pm.test(\"Get user name\", function () {\r",
									"//     var jsonData = pm.response.json();\r",
									"//     pm.expect(jsonData.login).to.eql(\"admin\");\r",
									"// });\r",
									"\r",
									"// pm.test(\"Set auth token\", function () {\r",
									"//     var jsonData = pm.response.json();\r",
									"//     var atoken = \"Bearer \" + jsonData.token\r",
									"//     console.log(atoken);\r",
									"//     pm.environment.set(\"Authorization\", atoken);\r",
									"// });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{hostPort}}/v1/auth?login={{login}}&password={{password}}",
							"protocol": "http",
							"host": [
								"{{hostPort}}"
							],
							"path": [
								"v1",
								"auth"
							],
							"query": [
								{
									"key": "login",
									"value": "{{login}}",
									"description": "(Required) User login"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"description": "(Required) User password"
								}
							]
						},
						"description": "Получение данных для авторизации из ответа"
					},
					"response": [
						{
							"name": "Auth error",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/auth?login=<string>&password=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth"
									],
									"query": [
										{
											"key": "login",
											"value": "<string>"
										},
										{
											"key": "password",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"Incorrect login or password\""
						},
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/auth?login=<string>&password=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth"
									],
									"query": [
										{
											"key": "login",
											"value": "<string>"
										},
										{
											"key": "password",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"login\": \"admin\",\n \"token\": \"SomeToken\",\n \"expiredTime\": \"2017-07-21T17:32:28Z\"\n}"
						}
					]
				},
				{
					"name": "2 Get rubrics",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"description": "(Required) Bearer auth token. Value example: 'Bearer 84f8a84bc0edeeb5742e9c2b706e94ea'",
								"key": "Authorization",
								"value": "{{Authorization}}"
							}
						],
						"url": {
							"raw": "http://{{hostPort}}/v1/rubric",
							"protocol": "http",
							"host": [
								"{{hostPort}}"
							],
							"path": [
								"v1",
								"rubric"
							]
						},
						"description": "Запрос работает только с правильным заголовком Authorization, который надо получить в предыдущем запросе"
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "<string>",
										"description": "(Required) Bearer auth token. Value example: 'Bearer 84f8a84bc0edeeb5742e9c2b706e94ea'"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/author?sort=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"author"
									],
									"query": [
										{
											"key": "sort",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"id\": 5,\n  \"firstName\": \"Ivan\",\n  \"lastName\": \"Ivanov\",\n  \"position\": \"Corrector\"\n },\n {\n  \"id\": 5,\n  \"firstName\": \"Ivan\",\n  \"lastName\": \"Ivanov\",\n  \"position\": \"Corrector\"\n }\n]"
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "beedbc41-3a43-436c-aba4-6c38d719a052",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "8302bdc2-3f4b-403f-bea5-e483b36aebe4",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "3 Pre request script",
			"item": [
				{
					"name": "1 Get rubrics Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8973833e-ded6-4020-9d5d-ae51977617c3",
								"exec": [
									"var addr = pm.variables.get(\"hostPort\")\r",
									"var login = pm.variables.get(\"login\")\r",
									"var password = pm.variables.get(\"password\")\r",
									"\r",
									"pm.sendRequest(\"http://\" + addr + \"/v1/auth?login=\" + login + \"&password=\" + password, function (err, response) {\r",
									"    var jsonData = response.json();\r",
									"    var atoken = \"Bearer \" + jsonData.token;\r",
									"    console.log(atoken);\r",
									"    pm.variables.set(\"Authorization\", atoken);\r",
									"});\r",
									" "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"description": "(Required) Bearer auth token. Value example: 'Bearer 84f8a84bc0edeeb5742e9c2b706e94ea'",
								"key": "Authorization",
								"value": "{{Authorization}}"
							}
						],
						"url": {
							"raw": "http://{{hostPort}}/v1/rubric",
							"protocol": "http",
							"host": [
								"{{hostPort}}"
							],
							"path": [
								"v1",
								"rubric"
							]
						},
						"description": "Получение токена в pre-request script"
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "<string>",
										"description": "(Required) Bearer auth token. Value example: 'Bearer 84f8a84bc0edeeb5742e9c2b706e94ea'"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/author?sort=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"author"
									],
									"query": [
										{
											"key": "sort",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"id\": 5,\n  \"firstName\": \"Ivan\",\n  \"lastName\": \"Ivanov\",\n  \"position\": \"Corrector\"\n },\n {\n  \"id\": 5,\n  \"firstName\": \"Ivan\",\n  \"lastName\": \"Ivanov\",\n  \"position\": \"Corrector\"\n }\n]"
						}
					]
				},
				{
					"name": "2 Add or update author",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "87faf025-dd6d-4a8f-ae00-c51bc1ef3350",
								"exec": [
									"// Функция возвращает случайную букву из массива\r",
									"function randChar() {\r",
									"    var symbols = \"абвгдеёжзийклмнопрстуфхцчшщъыьэюя\";\r",
									"    return symbols.charAt(Math.floor(Math.random() * symbols.length))\r",
									"}\r",
									"\r",
									"// Функция возвращает строку из случайных символов с первой прописной буквой\r",
									"function randName(x) {\r",
									"    var text = randChar().toUpperCase();\r",
									"    for (var i = 1; i < x; i++)\r",
									"        text += randChar();\r",
									"    return text;\r",
									"}\r",
									"\r",
									"pm.variables.set(\"name\", randName(10));\r",
									"pm.variables.set(\"fam\", randName(12));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"description": "(Required) Bearer auth token. Value example: 'Bearer 84f8a84bc0edeeb5742e9c2b706e94ea'",
								"key": "Authorization",
								"value": "{{Authorization}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": {{$randomInt}},\n    \"firstName\": \"{{name}}\",\n    \"lastName\": \"{{fam}}\",\n    \"position\": \"{{$randomJobType}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{hostPort}}/v1/author",
							"protocol": "http",
							"host": [
								"{{hostPort}}"
							],
							"path": [
								"v1",
								"author"
							]
						},
						"description": "Генерация данных для запроса. Рассматривается использование pre-request-script и динамических переменных"
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "<string>",
										"description": "(Required) Bearer auth token. Value example: 'Bearer 84f8a84bc0edeeb5742e9c2b706e94ea'"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 5,\n    \"firstName\": \"Ivan\",\n    \"lastName\": \"Ivanov\",\n    \"position\": \"Corrector\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/author",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"author"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"id\": 5,\n \"firstName\": \"Ivan\",\n \"lastName\": \"Ivanov\",\n \"position\": \"Corrector\"\n}"
						}
					]
				},
				{
					"name": "3 Get autors",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2e1cc0a7-8b70-4f6c-843c-82a723db6ced",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{Authorization}}",
								"description": "(Required) Bearer auth token. Value example: 'Bearer 84f8a84bc0edeeb5742e9c2b706e94ea'",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{hostPort}}/v1/author",
							"protocol": "http",
							"host": [
								"{{hostPort}}"
							],
							"path": [
								"v1",
								"author"
							]
						},
						"description": "Генерация данных для запроса. Рассматривается использование pre-request-script и динамических переменных"
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "<string>",
										"description": "(Required) Bearer auth token. Value example: 'Bearer 84f8a84bc0edeeb5742e9c2b706e94ea'"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 5,\n    \"firstName\": \"Ivan\",\n    \"lastName\": \"Ivanov\",\n    \"position\": \"Corrector\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/author",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"author"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"id\": 5,\n \"firstName\": \"Ivan\",\n \"lastName\": \"Ivanov\",\n \"position\": \"Corrector\"\n}"
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "4 Runner",
			"item": [
				{
					"name": "1 Get auth token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7876b554-21b2-4378-9b9a-eb21aa7c9641",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Get user name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.login).to.eql(\"admin\");\r",
									"});\r",
									"\r",
									"pm.test(\"Set auth token\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var atoken = \"Bearer \" + jsonData.token\r",
									"    console.log(atoken);\r",
									"    pm.environment.set(\"Authorization\", atoken);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{hostPort}}/v1/auth?login={{login}}&password={{password}}",
							"protocol": "http",
							"host": [
								"{{hostPort}}"
							],
							"path": [
								"v1",
								"auth"
							],
							"query": [
								{
									"key": "login",
									"value": "{{login}}",
									"description": "(Required) User login"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"description": "(Required) User password"
								}
							]
						},
						"description": "Получение данных для авторизации из ответа"
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/auth?login=<string>&password=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth"
									],
									"query": [
										{
											"key": "login",
											"value": "<string>"
										},
										{
											"key": "password",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"login\": \"admin\",\n \"token\": \"SomeToken\",\n \"expiredTime\": \"2017-07-21T17:32:28Z\"\n}"
						},
						{
							"name": "Auth error",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/auth?login=<string>&password=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth"
									],
									"query": [
										{
											"key": "login",
											"value": "<string>"
										},
										{
											"key": "password",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"Incorrect login or password\""
						}
					]
				},
				{
					"name": "2 Add or update author runner",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d9b743db-f7ae-4b17-8e8b-c9f03b54b3e1",
								"exec": [
									"var addr = pm.variables.get(\"hostPort\")\r",
									"\r",
									"pm.sendRequest(\"http://\" + addr + \"/v1/author\", function (err, response) {\r",
									"    var resp = response.json()\r",
									"    try {\r",
									"        var ids = resp[resp.length - 1].id\r",
									"        pm.variables.set(\"id\", ids + 1)\r",
									"    }\r",
									"    catch {pm.variables.set(\"id\", 1)}\r",
									"});\r",
									"\r",
									"\r",
									"function randChar(){\r",
									"    var symbols = \"абвгдеёжзийклмнопрстуфхцчшщъыьэюя\";\r",
									"    return symbols.charAt(Math.floor(Math.random() * symbols.length))\r",
									"}\r",
									" \r",
									"function randName(x) {\r",
									"    var text = randChar().toUpperCase();\r",
									"    for (var i = 1; i < x; i++)\r",
									"        text += randChar();\r",
									"    return text;\r",
									"}\r",
									"\r",
									"pm.globals.set(\"name\", randName(10));\r",
									"pm.globals.set(\"fam\", randName(12));\r",
									"pm.variables.set(\"position\", randName(12));\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "fe75871b-67c3-4f62-b110-a9fed6cc1319",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"description": "(Required) Bearer auth token. Value example: 'Bearer 84f8a84bc0edeeb5742e9c2b706e94ea'",
								"key": "Authorization",
								"value": "{{Authorization}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": {{id}},\n    \"firstName\": \"{{name}}\",\n    \"lastName\": \"{{fam}}\",\n    \"position\": \"{{position}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{hostPort}}/v1/author",
							"protocol": "http",
							"host": [
								"{{hostPort}}"
							],
							"path": [
								"v1",
								"author"
							]
						},
						"description": "Генерация данных для запроса - чтение из файла"
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "<string>",
										"description": "(Required) Bearer auth token. Value example: 'Bearer 84f8a84bc0edeeb5742e9c2b706e94ea'"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 5,\n    \"firstName\": \"Ivan\",\n    \"lastName\": \"Ivanov\",\n    \"position\": \"Corrector\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/author",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"author"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"id\": 5,\n \"firstName\": \"Ivan\",\n \"lastName\": \"Ivanov\",\n \"position\": \"Corrector\"\n}"
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "9b7506e6-1265-4110-8266-ae8354cc2cab",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "efd5e16d-7511-49a4-bf0e-887a8fb27e28",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "5 Runner complete scenario",
			"item": [
				{
					"name": "1 Add author",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0e595079-8227-4f66-b5ef-079b9b11a0f2",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "fd7c8c7d-b2a8-4592-8919-bbdfb9e18e5c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"description": "(Required) Bearer auth token. Value example: 'Bearer 84f8a84bc0edeeb5742e9c2b706e94ea'",
								"key": "Authorization",
								"value": "{{Authorization}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": 1,\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"position\": \"{{$randomJobType}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{hostPort}}/v1/author",
							"protocol": "http",
							"host": [
								"{{hostPort}}"
							],
							"path": [
								"v1",
								"author"
							]
						},
						"description": "Генерация данных для запроса - чтение из файла"
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "<string>",
										"description": "(Required) Bearer auth token. Value example: 'Bearer 84f8a84bc0edeeb5742e9c2b706e94ea'"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 5,\n    \"firstName\": \"Ivan\",\n    \"lastName\": \"Ivanov\",\n    \"position\": \"Corrector\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/author",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"author"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"id\": 5,\n \"firstName\": \"Ivan\",\n \"lastName\": \"Ivanov\",\n \"position\": \"Corrector\"\n}"
						}
					]
				},
				{
					"name": "2 Add a new record to the store",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c029df4c-576c-4590-a4b1-0cf441c4a452",
								"exec": [
									"pm.test(\"Get record id\", function () {\r",
									"    var rid = pm.response.json().id;\r",
									"    pm.globals.set(\"recid\",rid);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"rubricId\": 1,\r\n\t\"authorId\": 1,\r\n\t\"title\": \"Some title\",\r\n\t\"content\": \"Some content\"\r\n}"
						},
						"url": {
							"raw": "http://{{hostPort}}/v1/record",
							"protocol": "http",
							"host": [
								"{{hostPort}}"
							],
							"path": [
								"v1",
								"record"
							]
						}
					},
					"response": []
				},
				{
					"name": "3 Update record status",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{hostPort}}/v1/record/{{recid}}?status=verified",
							"protocol": "http",
							"host": [
								"{{hostPort}}"
							],
							"path": [
								"v1",
								"record",
								"{{recid}}"
							],
							"query": [
								{
									"key": "status",
									"value": "verified"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "4 Get record",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							}
						],
						"url": {
							"raw": "http://{{hostPort}}/v1/record/{{recid}}",
							"protocol": "http",
							"host": [
								"{{hostPort}}"
							],
							"path": [
								"v1",
								"record",
								"{{recid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "5 Delete record",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							},
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{hostPort}}/v1/record/{{recid}}",
							"protocol": "http",
							"host": [
								"{{hostPort}}"
							],
							"path": [
								"v1",
								"record",
								"{{recid}}"
							]
						},
						"description": "Delete record"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "3b5227a1-4936-4f48-9aaa-5e030387f4ab",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "2415f300-5d87-4f39-9936-cfa128ca9f26",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Other",
			"item": [
				{
					"name": "0 Reset",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{hostPort}}/v1/clear",
							"protocol": "http",
							"host": [
								"{{hostPort}}"
							],
							"path": [
								"v1",
								"clear"
							]
						},
						"description": "Проверка работоспособности сервиса"
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "29a32a33-731b-41ca-8dbc-623158a2d159",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "5f09eeed-69bd-4b3a-910e-6279621ae3b9",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "03bab557-840c-40df-83a6-785b9ecfe2ad",
			"key": "host",
			"value": "127.0.0.1",
			"type": "string",
			"disabled": true
		},
		{
			"id": "109cf570-87ab-4be5-8530-1c176d7d818a",
			"key": "port",
			"value": "1234",
			"type": "string",
			"disabled": true
		},
		{
			"id": "1667af1c-2ee0-4839-b683-ce725b0e7b83",
			"key": "host1",
			"value": "192.168.88.241",
			"type": "string",
			"disabled": true
		},
		{
			"id": "05c16211-4324-4dab-94fb-80bee500d04a",
			"key": "hostPort",
			"value": "127.0.0.1:1234",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}