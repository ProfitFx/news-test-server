{
	"info": {
		"_postman_id": "0c0f0e48-5648-43e1-acfa-2ca7cb2566e1",
		"name": "Postman workshop",
		"description": "Коллекция для проведения воркшопа\r\nПроверка приложения - ping: http://localhost:1234/v1/ping\r\nДокументация к сервису: http://localhost:1234/doc\r\nSwagger: http://localhost:1234/swagger\r\nСтраничка с сущностями http://localhost:1234/main\r\nВизуализация https://learning.postman.com/docs/postman/sending-api-requests/visualizer/\r\nДемонстрация визуализации https://www.youtube.com/watch?v=i1jU-kivApg",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "0 Ping",
			"item": [
				{
					"name": "Ping",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{hostPort}}/v1/ping",
							"protocol": "http",
							"host": [
								"{{hostPort}}"
							],
							"path": [
								"v1",
								"ping"
							]
						},
						"description": "Проверка работоспособности сервиса"
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "1 Tests",
			"item": [
				{
					"name": "About",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c0c4936d-6816-404c-86c1-78c51913c44e",
								"exec": [
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"// pm.test(\"Status code is 200\", function () {\r",
									"//     pm.response.to.have.status(200);\r",
									"// });\r",
									"\r",
									"// pm.test(\"Body matches string postman\", function () {\r",
									"//     pm.expect(pm.response.text()).to.include(\"postman\");\r",
									"// });\r",
									"\r",
									"// pm.test(\"Body matches string hello world\", function () {\r",
									"//     pm.expect(pm.response.text()).to.include(\"hello world\");\r",
									"// });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{hostPort}}/v1/about",
							"protocol": "http",
							"host": [
								"{{hostPort}}"
							],
							"path": [
								"v1",
								"about"
							]
						},
						"description": "Первый тест на проверку кода ответа и содержание в ответе нужной подстроки"
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "2 Get variable from response",
			"item": [
				{
					"name": "1 Get auth token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c7ae7e4a-991d-4527-b489-db1ce4b8b624",
								"exec": [
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"// pm.test(\"Status code is 200\", function () {\r",
									"//     pm.response.to.have.status(200);\r",
									"// });\r",
									"\r",
									"// pm.test(\"Get user name\", function () {\r",
									"//     var jsonData = pm.response.json();\r",
									"//     pm.expect(jsonData.login).to.eql(\"admin\");\r",
									"// });\r",
									"\r",
									"// pm.test(\"Set auth token\", function () {\r",
									"//     var jsonData = pm.response.json();\r",
									"//     var atoken = \"Bearer \" + jsonData.token\r",
									"//     console.log(atoken);\r",
									"//     pm.environment.set(\"Authorization\", atoken);\r",
									"// });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{hostPort}}/v1/auth?login={{login}}&password={{password}}",
							"protocol": "http",
							"host": [
								"{{hostPort}}"
							],
							"path": [
								"v1",
								"auth"
							],
							"query": [
								{
									"key": "login",
									"value": "{{login}}",
									"description": "(Required) User login"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"description": "(Required) User password"
								}
							]
						},
						"description": "Получение данных для авторизации из ответа"
					},
					"response": [
						{
							"name": "Auth error",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/auth?login=<string>&password=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth"
									],
									"query": [
										{
											"key": "login",
											"value": "<string>"
										},
										{
											"key": "password",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"Incorrect login or password\""
						},
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/auth?login=<string>&password=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth"
									],
									"query": [
										{
											"key": "login",
											"value": "<string>"
										},
										{
											"key": "password",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"login\": \"admin\",\n \"token\": \"SomeToken\",\n \"expiredTime\": \"2017-07-21T17:32:28Z\"\n}"
						}
					]
				},
				{
					"name": "2 Get rubrics",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"description": "(Required) Bearer auth token. Value example: 'Bearer 84f8a84bc0edeeb5742e9c2b706e94ea'",
								"key": "Authorization",
								"value": "{{Authorization}}"
							}
						],
						"url": {
							"raw": "http://{{hostPort}}/v1/rubric",
							"protocol": "http",
							"host": [
								"{{hostPort}}"
							],
							"path": [
								"v1",
								"rubric"
							]
						},
						"description": "Запрос работает только с правильным заголовком Authorization, который надо получить в предыдущем запросе"
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "<string>",
										"description": "(Required) Bearer auth token. Value example: 'Bearer 84f8a84bc0edeeb5742e9c2b706e94ea'"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/author?sort=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"author"
									],
									"query": [
										{
											"key": "sort",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"id\": 5,\n  \"firstName\": \"Ivan\",\n  \"lastName\": \"Ivanov\",\n  \"position\": \"Corrector\"\n },\n {\n  \"id\": 5,\n  \"firstName\": \"Ivan\",\n  \"lastName\": \"Ivanov\",\n  \"position\": \"Corrector\"\n }\n]"
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "ce37b822-479e-4e98-91fe-48ef0d051f74",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "d3cd8191-fa2b-48fa-bd67-667f96adcf01",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "3 Pre request script",
			"item": [
				{
					"name": "1 Get rubrics",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "02240f20-b855-4cd3-846f-053d48313de8",
								"exec": [
									"var addr = pm.variables.get(\"hostPort\")\r",
									"var login = pm.variables.get(\"login\")\r",
									"var password = pm.variables.get(\"password\")\r",
									"\r",
									"pm.sendRequest(\"http://\" + addr + \"/v1/auth?login=\" + login + \"&password=\" + password, function (err, response) {\r",
									"    var jsonData = response.json();\r",
									"    var atoken = \"Bearer \" + jsonData.token;\r",
									"    console.log(atoken);\r",
									"    pm.variables.set(\"Authorization\", atoken);\r",
									"});\r",
									" "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"description": "(Required) Bearer auth token. Value example: 'Bearer 84f8a84bc0edeeb5742e9c2b706e94ea'",
								"key": "Authorization",
								"value": "{{Authorization}}"
							}
						],
						"url": {
							"raw": "http://{{hostPort}}/v1/rubric",
							"protocol": "http",
							"host": [
								"{{hostPort}}"
							],
							"path": [
								"v1",
								"rubric"
							]
						},
						"description": "Получение токена в pre-request script"
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "<string>",
										"description": "(Required) Bearer auth token. Value example: 'Bearer 84f8a84bc0edeeb5742e9c2b706e94ea'"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/author?sort=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"author"
									],
									"query": [
										{
											"key": "sort",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"id\": 5,\n  \"firstName\": \"Ivan\",\n  \"lastName\": \"Ivanov\",\n  \"position\": \"Corrector\"\n },\n {\n  \"id\": 5,\n  \"firstName\": \"Ivan\",\n  \"lastName\": \"Ivanov\",\n  \"position\": \"Corrector\"\n }\n]"
						}
					]
				},
				{
					"name": "2 Add or update author",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "80ab88fb-22dd-46a7-aeb0-93474128fae5",
								"exec": [
									"// Функция возвращает случайную букву из массива\r",
									"function randChar() {\r",
									"    var symbols = \"абвгдеёжзийклмнопрстуфхцчшщъыьэюя\";\r",
									"    return symbols.charAt(Math.floor(Math.random() * symbols.length))\r",
									"}\r",
									"\r",
									"// Функция возвращает строку из случайных символов с первой прописной буквой\r",
									"function randName(x) {\r",
									"    var text = randChar().toUpperCase();\r",
									"    for (var i = 1; i < x; i++)\r",
									"        text += randChar();\r",
									"    return text;\r",
									"}\r",
									"\r",
									"pm.variables.set(\"name\", randName(10));\r",
									"pm.variables.set(\"fam\", randName(12));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"description": "(Required) Bearer auth token. Value example: 'Bearer 84f8a84bc0edeeb5742e9c2b706e94ea'",
								"key": "Authorization",
								"value": "{{Authorization}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": {{$randomInt}},\n    \"firstName\": \"{{name}}\",\n    \"lastName\": \"{{fam}}\",\n    \"position\": \"{{$randomJobType}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{hostPort}}/v1/author",
							"protocol": "http",
							"host": [
								"{{hostPort}}"
							],
							"path": [
								"v1",
								"author"
							]
						},
						"description": "Генерация данных для запроса. Рассматривается использование pre-request-script и динамических переменных"
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "<string>",
										"description": "(Required) Bearer auth token. Value example: 'Bearer 84f8a84bc0edeeb5742e9c2b706e94ea'"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 5,\n    \"firstName\": \"Ivan\",\n    \"lastName\": \"Ivanov\",\n    \"position\": \"Corrector\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/author",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"author"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"id\": 5,\n \"firstName\": \"Ivan\",\n \"lastName\": \"Ivanov\",\n \"position\": \"Corrector\"\n}"
						}
					]
				},
				{
					"name": "3 Get autors",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "384fac30-f217-46eb-9d44-c99c8d59d3d8",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{Authorization}}",
								"description": "(Required) Bearer auth token. Value example: 'Bearer 84f8a84bc0edeeb5742e9c2b706e94ea'",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{hostPort}}/v1/author",
							"protocol": "http",
							"host": [
								"{{hostPort}}"
							],
							"path": [
								"v1",
								"author"
							]
						},
						"description": "Генерация данных для запроса. Рассматривается использование pre-request-script и динамических переменных"
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "<string>",
										"description": "(Required) Bearer auth token. Value example: 'Bearer 84f8a84bc0edeeb5742e9c2b706e94ea'"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 5,\n    \"firstName\": \"Ivan\",\n    \"lastName\": \"Ivanov\",\n    \"position\": \"Corrector\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/author",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"author"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"id\": 5,\n \"firstName\": \"Ivan\",\n \"lastName\": \"Ivanov\",\n \"position\": \"Corrector\"\n}"
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "4 Runner",
			"item": [
				{
					"name": "1 Get auth token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "04949f5e-f2a8-4615-8635-c8bff69fe2ba",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Get user name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.login).to.eql(\"admin\");\r",
									"});\r",
									"\r",
									"pm.test(\"Set auth token\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var atoken = \"Bearer \" + jsonData.token\r",
									"    console.log(atoken);\r",
									"    pm.environment.set(\"Authorization\", atoken);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{hostPort}}/v1/auth?login={{login}}&password={{password}}",
							"protocol": "http",
							"host": [
								"{{hostPort}}"
							],
							"path": [
								"v1",
								"auth"
							],
							"query": [
								{
									"key": "login",
									"value": "{{login}}",
									"description": "(Required) User login"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"description": "(Required) User password"
								}
							]
						},
						"description": "Получение данных для авторизации из ответа"
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/auth?login=<string>&password=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth"
									],
									"query": [
										{
											"key": "login",
											"value": "<string>"
										},
										{
											"key": "password",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"login\": \"admin\",\n \"token\": \"SomeToken\",\n \"expiredTime\": \"2017-07-21T17:32:28Z\"\n}"
						},
						{
							"name": "Auth error",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/auth?login=<string>&password=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth"
									],
									"query": [
										{
											"key": "login",
											"value": "<string>"
										},
										{
											"key": "password",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"Incorrect login or password\""
						}
					]
				},
				{
					"name": "2 Add or update author runner",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0003387d-82c6-4f20-868e-1bd59da3c650",
								"exec": [
									"var addr = pm.variables.get(\"hostPort\")\r",
									"\r",
									"pm.sendRequest(\"http://\" + addr + \"/v1/author\", function (err, response) {\r",
									"    var resp = response.json()\r",
									"    try {\r",
									"        var ids = resp[resp.length - 1].id\r",
									"        pm.variables.set(\"id\", ids + 1)\r",
									"    }\r",
									"    catch {pm.variables.set(\"id\", 1)}\r",
									"});\r",
									"\r",
									"\r",
									"function randChar(){\r",
									"    var symbols = \"абвгдеёжзийклмнопрстуфхцчшщъыьэюя\";\r",
									"    return symbols.charAt(Math.floor(Math.random() * symbols.length))\r",
									"}\r",
									" \r",
									"function randName(x) {\r",
									"    var text = randChar().toUpperCase();\r",
									"    for (var i = 1; i < x; i++)\r",
									"        text += randChar();\r",
									"    return text;\r",
									"}\r",
									"\r",
									"pm.globals.set(\"name\", randName(10));\r",
									"pm.globals.set(\"fam\", randName(12));\r",
									"pm.variables.set(\"position\", randName(12));\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "35e6944d-d6bb-451c-aaa9-916166e1ea09",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"description": "(Required) Bearer auth token. Value example: 'Bearer 84f8a84bc0edeeb5742e9c2b706e94ea'",
								"key": "Authorization",
								"value": "{{Authorization}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": {{id}},\n    \"firstName\": \"{{name}}\",\n    \"lastName\": \"{{fam}}\",\n    \"position\": \"{{position}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{hostPort}}/v1/author",
							"protocol": "http",
							"host": [
								"{{hostPort}}"
							],
							"path": [
								"v1",
								"author"
							]
						},
						"description": "Генерация данных для запроса - чтение из файла"
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "<string>",
										"description": "(Required) Bearer auth token. Value example: 'Bearer 84f8a84bc0edeeb5742e9c2b706e94ea'"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 5,\n    \"firstName\": \"Ivan\",\n    \"lastName\": \"Ivanov\",\n    \"position\": \"Corrector\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/author",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"author"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"id\": 5,\n \"firstName\": \"Ivan\",\n \"lastName\": \"Ivanov\",\n \"position\": \"Corrector\"\n}"
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "e4a8aa7d-0b4c-4539-a050-7fcfca9a5bd6",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "ee631c47-e568-4e56-ac3e-facfcd30d290",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "5 Runner complete scenario",
			"item": [
				{
					"name": "1 Add author",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8ea18dee-d648-45a1-9c86-17201b2a2866",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1958a707-2e09-4392-99b4-b512de4950b9",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"description": "(Required) Bearer auth token. Value example: 'Bearer 84f8a84bc0edeeb5742e9c2b706e94ea'",
								"key": "Authorization",
								"value": "{{Authorization}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": 1,\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"position\": \"{{$randomJobType}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{hostPort}}/v1/author",
							"protocol": "http",
							"host": [
								"{{hostPort}}"
							],
							"path": [
								"v1",
								"author"
							]
						},
						"description": "Генерация данных для запроса - чтение из файла"
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "<string>",
										"description": "(Required) Bearer auth token. Value example: 'Bearer 84f8a84bc0edeeb5742e9c2b706e94ea'"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 5,\n    \"firstName\": \"Ivan\",\n    \"lastName\": \"Ivanov\",\n    \"position\": \"Corrector\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/author",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"author"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"id\": 5,\n \"firstName\": \"Ivan\",\n \"lastName\": \"Ivanov\",\n \"position\": \"Corrector\"\n}"
						}
					]
				},
				{
					"name": "2 Add a new record to the store",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2b52fc0d-c874-45be-b1be-9b9bb273dcd5",
								"exec": [
									"pm.test(\"Get record id\", function () {\r",
									"    var rid = pm.response.json().id;\r",
									"    pm.globals.set(\"recid\",rid);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"rubricId\": 1,\r\n\t\"authorId\": 1,\r\n\t\"title\": \"Some title\",\r\n\t\"content\": \"Some content\"\r\n}"
						},
						"url": {
							"raw": "http://{{hostPort}}/v1/record",
							"protocol": "http",
							"host": [
								"{{hostPort}}"
							],
							"path": [
								"v1",
								"record"
							]
						}
					},
					"response": []
				},
				{
					"name": "3 Update record status",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{hostPort}}/v1/record/{{recid}}?status=verified",
							"protocol": "http",
							"host": [
								"{{hostPort}}"
							],
							"path": [
								"v1",
								"record",
								"{{recid}}"
							],
							"query": [
								{
									"key": "status",
									"value": "verified"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "4 Get record",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							}
						],
						"url": {
							"raw": "http://{{hostPort}}/v1/record/{{recid}}",
							"protocol": "http",
							"host": [
								"{{hostPort}}"
							],
							"path": [
								"v1",
								"record",
								"{{recid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "5 Delete record",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							},
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{hostPort}}/v1/record/{{recid}}",
							"protocol": "http",
							"host": [
								"{{hostPort}}"
							],
							"path": [
								"v1",
								"record",
								"{{recid}}"
							]
						},
						"description": "Delete record"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "c4ca6871-f461-4016-80f9-f3dbbde16cf3",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "11704706-198d-4311-8bbe-73ff5120f343",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "6 Visualize",
			"item": [
				{
					"name": "1 Get autors",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1c4b02db-0c9f-4a2c-902d-35b6ea821099",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "413f0e33-cef0-429f-8e53-6644ce046058",
								"exec": [
									"var templateTable = \r",
									"`    <table bgcolor=\"#FFFFFF\" border=\"1\">\r",
									"        <tr>\r",
									"            <th>ID</th>\r",
									"            <th>FirstName</th>\r",
									"            <th>LastName</th>\r",
									"            <th>Position</th>\r",
									"        </tr>\r",
									"\r",
									"        {{#each response}}\r",
									"            <tr>\r",
									"                <th>{{id}}</th>\r",
									"                <th>{{firstName}}</th>\r",
									"                <th>{{lastName}}</th>\r",
									"                <th>{{position}}</th>\r",
									"            </tr>\r",
									"        {{/each}}\r",
									"    </table>\r",
									"`;\r",
									"\r",
									"// Set visualizer and pass the response body parsed as JSON as data\r",
									"pm.visualizer.set(templateTable, {response: pm.response.json()});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{Authorization}}",
								"description": "(Required) Bearer auth token. Value example: 'Bearer 84f8a84bc0edeeb5742e9c2b706e94ea'",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{hostPort}}/v1/author",
							"protocol": "http",
							"host": [
								"{{hostPort}}"
							],
							"path": [
								"v1",
								"author"
							]
						},
						"description": "Генерация данных для запроса. Рассматривается использование pre-request-script и динамических переменных"
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "<string>",
										"description": "(Required) Bearer auth token. Value example: 'Bearer 84f8a84bc0edeeb5742e9c2b706e94ea'"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 5,\n    \"firstName\": \"Ivan\",\n    \"lastName\": \"Ivanov\",\n    \"position\": \"Corrector\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/author",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"author"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"id\": 5,\n \"firstName\": \"Ivan\",\n \"lastName\": \"Ivanov\",\n \"position\": \"Corrector\"\n}"
						}
					]
				},
				{
					"name": "2 breweries",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "be540a60-72d4-4f3f-af4a-fad2ea088c24",
								"exec": [
									"let template = `\r",
									"    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css\" integrity=\"sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO\"\r",
									"        crossorigin=\"anonymous\">\r",
									"    <style type=\"text/css\">\r",
									"        body { font-size: 12px; background: #eee; padding: 16px;}\r",
									"        .card { border-radius: 8px; box-shadow: 0 4px 10px rgba(0,0,0,.15); -webkit-box-shadow: 0 4px 10px rgba(0,0,0,.15); -moz-box-shadow: 0 4px 10px rgba(0,0,0,.15);}\r",
									"        .card-topper { border-top-right-radius: 8px; border-top-left-radius: 8px; padding: 8px 16px; font-size: 12px; font-weight: 600; text-transform: uppercase;}\r",
									"        .card-topper.micro { background-color: #173F5F; color: #ffffff;}\r",
									"        .card-topper.planning { background-color: #ED553B; color: #ffffff;}\r",
									"        .card-topper.large { background-color: #ED553B; color: #ffffff;}\r",
									"        .card-topper.brewpub { background-color: #20639B; color: #ffffff;}\r",
									"        .card-topper.regional { background-color: #F6D55C;}\r",
									"        .card-topper.contract { background-color: #3CAEA3; color: #ffffff;}\r",
									"        .card-topper.proprietor { background-color: #ED553B; color: #ffffff;}\r",
									"        .card-topper.bar { background-color: #ED553B; color: #ffffff;}\r",
									"    </style>\r",
									"    <div class=\"container-fluid\">\r",
									"        <div class=\"row\">\r",
									"            <div class=\"col mb-4\">\r",
									"                <h1>Breweries</h1>\r",
									"            </div>\r",
									"        </div>\r",
									"        <div class=\"row\">\r",
									"            {{#each response}}\r",
									"            <div class=\"col-sm-6 col-lg-4 col-xl-3 mb-5\">\r",
									"                <div class=\"card\">\r",
									"                    <div class=\"test card-topper card-img-top {{brewery_type}}\">{{brewery_type}}</div>\r",
									"                    <div class=\"card-body\">\r",
									"                        <h2>{{name}}</h2>\r",
									"                        <address>{{street}}<br>{{city}}, {{state}} {{postal_code}}</address>\r",
									"                        <a href=\"{{website_url}}\" class=\"card-link\" target=\"_blank\" rel=\"noopener noreferrer\">Website</a>\r",
									"                        <a href=\"https://www.google.com/maps/search/?api=1&query={{name}} {{state}}\" class=\"card-link\" target=\"_blank\" rel=\"noopener noreferrer\">Map</a>\r",
									"                    </div>\r",
									"                </div>\r",
									"            </div>\r",
									"            {{/each}}\r",
									"        </div>\r",
									"    </div>\r",
									"`;\r",
									"\r",
									"pm.visualizer.set(template, {\r",
									"    response: JSON.parse(responseBody)\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.openbrewerydb.org/breweries",
							"protocol": "https",
							"host": [
								"api",
								"openbrewerydb",
								"org"
							],
							"path": [
								"breweries"
							]
						},
						"description": "https://www.youtube.com/watch?v=i1jU-kivApg\r\nhttps://blog.postman.com/visualizing-open-brewery-data-with-bootstrap/"
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Other",
			"item": [
				{
					"name": "0 Reset",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{hostPort}}/v1/clear",
							"protocol": "http",
							"host": [
								"{{hostPort}}"
							],
							"path": [
								"v1",
								"clear"
							]
						},
						"description": "Проверка работоспособности сервиса"
					},
					"response": []
				},
				{
					"name": "1 Delete authors",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d870ab62-ede6-4372-b969-f057f95bfd92",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ae20bc03-57a6-49aa-ba19-21f1b2b501f6",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"description": "(Required) Bearer auth token. Value example: 'Bearer 84f8a84bc0edeeb5742e9c2b706e94ea'",
								"key": "Authorization",
								"value": "{{Authorization}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"disabled": true
							}
						],
						"url": {
							"raw": "http://{{hostPort}}/v1/author/{{authorId}}",
							"protocol": "http",
							"host": [
								"{{hostPort}}"
							],
							"path": [
								"v1",
								"author",
								"{{authorId}}"
							]
						},
						"description": "Удаление автора"
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "<string>",
										"description": "(Required) Bearer auth token. Value example: 'Bearer 84f8a84bc0edeeb5742e9c2b706e94ea'"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 5,\n    \"firstName\": \"Ivan\",\n    \"lastName\": \"Ivanov\",\n    \"position\": \"Corrector\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/author",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"author"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"id\": 5,\n \"firstName\": \"Ivan\",\n \"lastName\": \"Ivanov\",\n \"position\": \"Corrector\"\n}"
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "4cdede41-14b7-41a2-bac0-cf5c6a69ea9a",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "f068b9b3-feb3-4683-82d4-5915a9d8dde4",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "826c08fe-b37a-40e0-988e-9b875e6420a5",
			"key": "host",
			"value": "127.0.0.1",
			"type": "string",
			"disabled": true
		},
		{
			"id": "b768ae1a-d617-4a21-951e-b529ea9b56cd",
			"key": "port",
			"value": "1234",
			"type": "string",
			"disabled": true
		},
		{
			"id": "b3a96c3f-48be-4faa-ab4f-d0f38aa1181a",
			"key": "host1",
			"value": "192.168.88.241",
			"type": "string",
			"disabled": true
		},
		{
			"id": "047e34db-b4e3-4b3d-8ee3-2a618aadb46e",
			"key": "hostPort",
			"value": "127.0.0.1:1234",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}